# =================================================================================================
#     Dependencies
# =================================================================================================

import os, sys, pwd, re
import pandas as pd
from datetime import datetime

# CRISPResso outputs several pngs, that we want to collect for ease of inspection.
# Here, we list the prefixes of the ones we are interested in.
image_prefixes = [ "2a", "2b", "4c", "9", "10e" ]

# =================================================================================================
#     Get Samples
# =================================================================================================

# Load the config. If --directory was provided, this is also loaded from there.
# This is useful to have runs that have different settings, but generally re-use the main setup.
configfile: "config.yaml"

# Read samples and units table
config["samples"] = pd.read_csv(config["samples-table"], sep='\t', dtype=str)

# Remove dashes from the names, as CRISPResso cannot handle them...
# See https://github.com/pinellolab/CRISPResso2/issues/73
config["samples"]["sample"] = config["samples"]["sample"].str.replace('-', '_')
config["samples"] = config["samples"].set_index(["sample", "unit"], drop=False)

# Enforce to use strings in the index
config["samples"].index = config["samples"].index.set_levels(
    [i.astype(str) for i in config["samples"].index.levels]
)

# Get a list of all samples names, in the same order as the input sample table.
# Samples with multiple units appear only once, at the first position in the table.
# We cannot use a simple approach here, as this messes up the sample
# order, which we do not want... (good that we noticed that bug though!)
# So instead, we iterate, and add sample names incrementally.
config["sample-names"] = list()
for index, row in config["samples"].iterrows():
    s = row["sample"]
    if s not in config["sample-names"]:
        config["sample-names"].append(s)

# Get the fastq files for a sample, either single or paired end, as a dictionary.
def get_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    smps = config["samples"]
    wildcards.unit = "1"
    fastqs = smps.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()
    if len(fastqs) == 2:
        return {"r1": fastqs.fq1, "r2": fastqs.fq2}
    else:
        return {"r1": fastqs.fq1}

# User output
logger.info("Samples: " + str(len(config["sample-names"])))
logger.info("Python:  " + str(sys.version.split(' ')[0]))

# =================================================================================================
#     Get Amplicons and Guides
# =================================================================================================

# Make a map of sample name to guide identifier
config["sample-guides"] = {}
for name in config["sample-names"]:
    match = re.search("_(g[123])_", name)
    config["sample-guides"][name] = match.group(1)

# Get the information from the amplicon file to get our amplicon seq and guide seq
config["ampli-seqs"] = {}
config["guide-seqs"] = {}
with open(config["amplicons-file"]) as file:
    for line in file:
        arr = line.rstrip().split('\t')
        config["ampli-seqs"][arr[0]] = arr[1]
        config["guide-seqs"][arr[0]] = arr[2]

# Make the batch settings table
batchfile = "batchfile.tsv"
batchfh = open(batchfile, "w")
batchfh.write("name\tfastq_r1\tfastq_r2\tamplicon_name\tamplicon_seq\tguide_seq\n")
for name in config["sample-names"]:
    fastq = config["samples"].loc[(name, "1"), ["fq1", "fq2"]].dropna()
    guide = config["sample-guides"][name]
    batchfh.write(name + "\t")
    batchfh.write(fastq.fq1 + "\t")
    batchfh.write(fastq.fq2 + "\t")
    batchfh.write(guide + "\t")
    batchfh.write(config["ampli-seqs"][guide] + "\t")
    batchfh.write(config["guide-seqs"][guide] + "\n")
batchfh.close()

# =================================================================================================
#     all Batch
# =================================================================================================

rule all_batch:
    input:
        "crispresso/CRISPRessoBatch_on_batchfile/CRISPResso2Batch_report.html",
        expand(
            "images/{prefix}/{sample}.png",
            sample=config["sample-names"],
            prefix=image_prefixes
        )

localrules: all_batch

# =================================================================================================
#     CRISPResso2 Batch
# =================================================================================================

rule crispresso_batch:
    output:
        report="crispresso/CRISPRessoBatch_on_batchfile/CRISPResso2Batch_report.html"
    params:
        batchfile = batchfile,
        trimmomatic = config["trimmomatic-options-string"]
    log:
        "logs/crispresso/batch.log"
    conda:
        "envs/crispresso.yaml"
    shell:
        "CRISPRessoBatch --batch_settings {params.batchfile} --batch_output_folder crispresso "
        "--write_cleaned_report --place_report_in_output_folder --n_processes 10 "
        "--trim_sequences --trimmomatic_options_string {params.trimmomatic} "
        "--base_editor_output --output_folder crispresso/ --debug > {log} 2>&1"

rule copy_pngs:
    input:
        report="crispresso/CRISPRessoBatch_on_batchfile/CRISPResso2Batch_report.html"
    output:
        "images/{prefix}/{sample}.png"
    params:
        basedir = "crispresso/CRISPRessoBatch_on_batchfile/CRISPResso_on_{sample}"
    shell:
        "cp {params.basedir}/{wildcards.prefix}.*.png {output}"

localrules: copy_pngs

# =================================================================================================
#     all Pooled
# =================================================================================================

# rule all_pooled:
#     input:
#         expand(
#             "crispresso/{sample}/CRISPRessoPooled_on_{sample}.html",
#             sample=config["sample-names"]
#         ),
#         expand(
#             "images/{prefix}/{sample}.png",
#             sample=config["sample-names"],
#             prefix=image_prefixes
#         )
#
# localrules: all_pooled

# =================================================================================================
#     CRISPResso2 Pooled
# =================================================================================================

# rule crispresso_pooled:
#     input:
#         unpack(get_fastq)
#     output:
#         report="crispresso/{sample}/CRISPRessoPooled_on_{sample}.html"
#     params:
#         sample = "{sample}",
#         amplicons   = config["amplicons-file"],
#         trimmomatic = config["trimmomatic-options-string"]
#     log:
#         "logs/crispresso/{sample}.log"
#     conda:
#         "envs/crispresso.yaml"
#     shell:
#         "CRISPRessoPooled -r1 {input.r1} -r2 {input.r2} -f {params.amplicons} -n {params.sample} "
#         "--trim_sequences --trimmomatic_options_string {params.trimmomatic} "
#         "--base_editor_output --output_folder crispresso/{params.sample}/  > {log} 2>&1"

# rule copy_pngs_pooled:
#     input:
#         report="crispresso/{sample}/CRISPRessoPooled_on_{sample}.html"
#     output:
#         "images/{prefix}/{sample}.png"
#     params:
#         basedir = "crispresso/{sample}/CRISPRessoPooled_on_{sample}/CRISPResso_on_Site2"
#     shell:
#         "cp {params.basedir}/{wildcards.prefix}.*.png {output}"
#
# localrules: copy_pngs_pooled
