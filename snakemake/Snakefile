# =================================================================================================
#     Dependencies
# =================================================================================================

##### when run in cluster #################
#module load BCFtools/1.10.2
#module load SLiM/4.0.1
#module load HTSlib/1.10.2 
##### when run in cluster #################
configfile: "config.yaml"


replicates = list(range(0,config['replicates']))
optima = list(range(0,config['optima']))


######

rule run_python_script:
    input:
        base_vcf = config['base_vcf'], 
        optimum_ecotypes = config['optimum_ecotypes'], 
        base_fasta = config['base_fasta']

    output:
        bed_sc="arq_pi{pi}_beta{beta}/selection_coef.bed", 
        optima='arq_pi{pi}_beta{beta}/optima_files/optima.csv', 
        slim='arq_pi{pi}_beta{beta}/optima_files/optima_slim.txt'
    params:
        pi = lambda wildcards: str(wildcards.pi),
        beta = lambda wildcards: str(wildcards.beta),
        chr_number = config['chr_number']
    conda:
        'envs/base_env.yaml'
    script:
        "pi_beta_calc.py"

rule run_bash_script:
    input:
        vcf_file = config['base_vcf'], 
        bed_sc="arq_pi{pi}_beta{beta}/selection_coef.bed"
    output:
        "arq_pi{pi}_beta{beta}/annotated.vcf"
    threads: 4
    shell:
        #"chmod +x annotate.sh",
        "./annotate.sh {input} {output} {threads}"

rule run_slim_script:
    input:
        fasta = config['base_fasta'],
        vcf ="arq_pi{pi}_beta{beta}/annotated.vcf", 
        optima_slim ='arq_pi{pi}_beta{beta}/optima_files/optima_slim.txt'
    output:
        expand(
            "arq_pi{{pi}}_beta{{beta}}/vcf_files/optima{{optima}}/subp{replicates}.vcf",
            replicates = range(0,12)
        )
    params: 
        optima = lambda wildcards: str(wildcards.optima),
        initial_pop = config['initial_pop']
    #log:
    #    "log/run_slim_script/pi{pi}_beta{beta}.log" > {log} 2>&1
    shell:
         "./slim.sh -f {input.fasta} -v {input.vcf} -s {input.optima_slim} -o {output[0]} -p {params.optima} -i {params.initial_pop}"

rule run_python_script2:
    input:
        expand(
            "arq_pi{{pi}}_beta{{beta}}/vcf_files/optima{optima}/subp{replicates}.vcf",
            optima=optima,
            replicates=replicates
        )
    output:
        'arq_pi{pi}_beta{beta}/simulation_results/allele_counts.csv',
        'arq_pi{pi}_beta{beta}/simulation_results/pool_sizes.csv'
    conda:
        'envs/base_env.yaml'
    script:
        'allele_counts_from_vcf.py'

rule all:
    input:
        expand(
            'arq_pi{pi}_beta{beta}/simulation_results/allele_counts.csv',
            pi=config['pi'],
            beta=config['beta']
        ),
        expand(
            'arq_pi{pi}_beta{beta}/simulation_results/pool_sizes.csv',
            pi=config['pi'],
            beta=config['beta']
        )
