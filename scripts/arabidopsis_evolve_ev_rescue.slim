// Author: Tati
// simulate evolution of qtl under different environments defined by an optima file 

////////////////////////////////////////////////////////////////////////////////
// Setup

initialize() {
    defineConstant('optima_file', '../snakemake/results/arq_mediumfreq_medpoly_betaprop/optima_files/optima_slim.txt');
	optimas = readFile(optima_file);

	if (!exists("optima"))defineConstant('optima', 0);
	defineConstant('optima_value', asFloat(optimas[asInteger(optima)]));

    defineConstant('ref_fasta', '../snakemake/data/chr5.fasta');
    defineConstant('main_vcf', '../snakemake/results/arq_mediumfreq_medpoly_betaprop/annotated.vcf');
    defineConstant('initial_pop', asInteger(2025));

   if (!exists("replicates"))defineConstant('replicates', 12);
   if (!exists("gen_to_run"))defineConstant('gen_to_run', 4);

	
   // now im gonna simulate the mutations coming from standing variation. 

   initializeSLiMModelType("nonWF");
   initializeSLiMOptions(nucleotideBased=T);
	length = initializeAncestralNucleotides(ref_fasta);   
	initializeMutationTypeNuc("m2", 0, "n", 0, 0.0);   // qtl1 196 # 19625*0.05
	m2.convertToSubstitution = F; 
   m2.color = "red"; 
   //print(optima_value);

	initializeMutationTypeNuc("m1", 0, "f", 0.0);       // neutral


	// g1 genomic element type: uses m2 for all mutations
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.0)); 
   //initializeGenomicElementType("g2", m1, 1.0);  cannot do it 

	initializeGenomicElement(g1, 0,  length-1);

	// initialize recombination 
	initializeRecombinationRate(0.0001);

}

//// create one popualtion and then popualte the new ones 
1 early() { 

	sim.addSubpop("p1", asInteger(initial_pop));  // 
	p1.genomes.readFromVCF(main_vcf, m2);  // vcf file with seelction coefficients 
	
}

// I will always keep the effect of the mutations neutral 
// becuase I am actually using their effect as an effect size 
1:999 mutationEffect(m2) {
	return 1.; 
}


/////// establish a reproduction regimen where the fitness of an individual will affect the number of offspring 

3:999 reproduction() { 
   // only run this if population size if greater than 0, would run into error otherwise 
	if (sim.subpopulations[0].individualCount > 0){
		// get each of the individuals
		inds = sim.subpopulations[0].individuals; 
		// calculate their phenotype
 		phenotypes = inds.sumOfMutationsOfType(m2); 
		// calculate their fitness
		fitness = exp(-0.5 * (phenotypes - (optima_value))^2);	
		// calculate their relative fitness
		max_fitness = max(fitness);
		rel_fitness = fitness / max_fitness;
		// calculate the number of offspring for each individual
		offspring = rel_fitness * 10;  //max number of offsrping 
		offspring = asInteger(floor((offspring)));		
		
		// loop over each of the individuals in the population
		for (j in 0:(size(sim.subpopulations[0].individuals)-1)) {
		// for each individual cehck their expected offspring size and based on that
		// for each offspring based on a chance of 97% make it a selfer offscpring or an outcross offspring 
			for (k in seqLen(offspring[j])) {
				if (runif(1) < 0.97) 
					{ 
  						 sim.subpopulations[0].addSelfed(sim.subpopulations[0].individuals[j]);
  					} 
				else
  					{ 
  						//for the outcrossign event chose at random another individual from teh population 
						mate = sim.subpopulations[0].sampleIndividuals(1);
 						sim.subpopulations[0].addCrossed(sim.subpopulations[0].individuals[j], mate);
			      }
														}
																					 }
																	}
	self.active = 0; 
}

2:999 fitnessEffect() { 
	// calculate their phenotype
	phenotype = sum(individual.genomes.sumOfMutationsOfType(m2));
	// calculate their fitness
  	fitness = exp(-0.5 * (phenotype - (optima_value))^2);
 	//also here I adjust for only 1 year of survival  (anual plant)
	return ifelse(individual.age <=1, fitness, 0.0);
}
    


2:999 late() { 
	// if after the survival event the population size is too big adjust it 
		if (sim.subpopulations[0].individualCount > 900){
			number_to_kill = sim.subpopulations[0].individualCount - 900;		
			sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
			}
 	}

//checkpoint
1:999 late() { 
	// check fluctuation of phenotype and fitness
	inds = sim.subpopulations[0].individuals; 
	phenotypes = inds.sumOfMutationsOfType(m2); 
	fitness = exp(-0.5 * (phenotypes - (optima_value))^2);
	print(phenotypes); // if the phenotypes are all the same i could assume there is ecotype sorting 
	catn(sim.cycle + ": Mean phen ="+ mean(phenotypes) + " optima "+ optima_value  + " ,subpop size:" + 			sim.subpopulations[0].individualCount) ;  	
	}
 	

// output 
4:999 late(){ 
	// make sure the sim is finished when desired 
	if(sim.cycle==gen_to_run){

	////////////////// this part generates the vcf file, comemented for now ///////////////////////////////////
	// if all the individuals died output would give error since cannot create vcf file so
		// if there are individuals create the vcf file
		//if (sim.subpopulations[0].individualCount > 0){
		//	sim.subpopulations[0].individuals.genomes.outputVCF('vcf_slim/optima' + optima + '/subp' + i + '.vcf');}
		//}
		// if there are no individuals create an empty file called vcf for snakemake to check them 
		//else{writeFile('vcf_slim/optima' + optima + '/subp' + i + '.vcf', 'all_indiv_died');}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	catn('pop_size,' + sim.subpopulations[0].individualCount );
	
	// iterate over each mutation in the simulation 
		for (mut in sim.mutations){ 
			catn('');
				// count the number of this mutation (basically alternative allele count)
				mutcount = sum(sim.subpopulations[0].genomes.containsMutations(mut)); 
   			// only add it to the output if the mucount is more than 0, so only if the mut is not lost 
				if (mutcount > 0) {
				// collect the position of the mutation
					cat(mut.position + ',' + mutcount);
					  					}
					  				}
       							}   
       
       sim.simulationFinished();  
            }